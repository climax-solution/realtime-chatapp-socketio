version: '3'
services:

  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
      - app-network
      - queue-network
      - db-network
    depends_on:
      - db
      - redis
      - laravel_echo_server

  #Nginx Service
  webserver:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${APP_PORT}:80"
    volumes:
      - ./:/var/www/html
      - .docker/nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5
  # DB UI management service
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - db-network

  #MySQL Service
  db:
    image: mysql:5.7.22
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - .docker/data/db:/var/lib/mysql/
      - .docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - db-network
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 30s
      timeout: 10s
      retries: 5
      
  laravel_echo_server:
    build:
      context: .docker/laravel-echo
      dockerfile: Dockerfile
    volumes:
      - .env:/app/.env
    restart: unless-stopped
    networks:
      - queue-network # laravel echo needs to access to redis to take message and broadcast
      - app-network # laravel echo needs to access app network to authenticate through webserver
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:6001 || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:5-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - .docker/data/redis:/data
    restart: unless-stopped
    networks:
      - queue-network
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5

#Docker Networks
networks:
  app-network:
    driver: bridge
  queue-network:
    driver: bridge
  db-network:
    driver: bridge
